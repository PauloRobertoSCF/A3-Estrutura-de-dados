
import java.util.*;

interface ReplacementPolicy {
    void accessPage(int page);
    boolean isInCache(int page);
    void setCapacity(int capacity);
    List<Integer> getCacheContent();
}

class FIFOPolicy implements ReplacementPolicy {
    private Queue<Integer> queue = new LinkedList<>();
    private Set<Integer> cache = new HashSet<>();
    private int capacity;

    public void setCapacity(int capacity) {
        this.capacity = capacity;
        queue.clear();
        cache.clear();
    }

    public void accessPage(int page) {
        if (!cache.contains(page)) {
            if (cache.size() == capacity) {
                int removed = queue.poll();
                cache.remove(removed);
            }
            queue.offer(page);
            cache.add(page);
        }
    }

    public boolean isInCache(int page) {
        return cache.contains(page);
    }

    public List<Integer> getCacheContent() {
        return new ArrayList<>(queue);
    }
}

class LRUPolicy implements ReplacementPolicy {
    private LinkedHashMap<Integer, Integer> cacheMap;
    private int capacity;

    public void setCapacity(int capacity) {
        this.capacity = capacity;
        cacheMap = new LinkedHashMap<>(capacity, 0.75f, true) {
            protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
                return size() > LRUPolicy.this.capacity;
            }
        };
    }

    public void accessPage(int page) {
        cacheMap.put(page, 1);
    }

    public boolean isInCache(int page) {
        return cacheMap.containsKey(page);
    }

    public List<Integer> getCacheContent() {
        return new ArrayList<>(cacheMap.keySet());
    }
}

public class CacheSimulador {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ReplacementPolicy policy;

        System.out.println("Escolha a política de substituição (FIFO ou LRU): ");
        String tipo = scanner.nextLine().trim().toUpperCase();

        if (tipo.equals("FIFO")) {
            policy = new FIFOPolicy();
        } else if (tipo.equals("LRU")) {
            policy = new LRUPolicy();
        } else {
            System.out.println("Política inválida!");
            return;
        }

        policy.setCapacity(4);
        System.out.println("Cache iniciada com capacidade 4.");

        while (true) {
            System.out.print("\nDigite o número da página (ou 'sair' para encerrar): ");
            String entrada = scanner.nextLine().trim();
            if (entrada.equalsIgnoreCase("sair")) break;

            try {
                int pagina = Integer.parseInt(entrada);
                boolean hit = policy.isInCache(pagina);

                policy.accessPage(pagina);

                System.out.println(hit ? "HIT!" : "MISS!");
                System.out.println("Cache atual: " + policy.getCacheContent());
            } catch (NumberFormatException e) {
                System.out.println("Entrada inválida. Digite um número ou 'sair'.");
            }
        }
